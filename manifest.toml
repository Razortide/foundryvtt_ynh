#:schema https://raw.githubusercontent.com/YunoHost/apps/master/schemas/manifest.v2.schema.json

packaging_format = 2

id = "foundryvtt"
name = "Foundry VTT"
description.en = "Installs the Foundry Virtual Tabletop on Yunohost! (License required)"
description.fr = "Installe le Foundry Virtual Tabletop sur Yunohost ! (Licence requise)"
description.de = "Installiert den Foundry Virtual Tabletop auf Yunohost! (Lizenz erforderlich)"

version = "1.0~ynh1"

maintainers = ["razortide"]

[upstream]
license = "proprietary" # you can see the available licenses identifiers list here: https://spdx.org/licenses/
website = "https://foundryvtt.com"
demo = "https://demo.foundryvtt.com/join"
admindoc = "https://foundryvtt.com/article/tutorial"
userdoc = "https://foundryvtt.com/article/player-orientation"

[integration]
yunohost = ">= 12.0.12"
helpers_version = "2.1"
architectures = ["amd64"]
multi_instance = false

ldap = "false"

sso = "false"

disk = "1G"
ram.build = "2G"
ram.runtime = "2G"

[install]
    [install.domain]
    # this is a generic question - ask strings are automatically handled by YunoHost's core
    type = "domain"

    [install.path]
    # this is a generic question - ask strings are automatically handled by YunoHost's core
    type = "path"
    default = "/example"

    [install.foundry_url]
    # The installation of FoundryVTT requires a Timed URL provided by the admin to download the application
    ask.en = "Provide the FoundryVTT Timed URL"
    ask.fr = "Entrez l'URL chronométrée du FoundryVTT"
    ask.de = "Gib die FoundryVTT Timed URL ein"
    type = "string"

    [install.init_main_permission]
    # this is a generic question - ask strings are automatically handled by YunoHost's core
    # This won't be saved as setting and will instead be used to initialize the SSOwat permission
    type = "group"
    default = "visitors"

    [install.language]
    ask.en = "Choose the application language"
    ask.fr = "Choisissez la langue de l'application"
    ask.de = "Wähle die Sprache der Applikation"
    type = "select"
    choices = ["fr", "en", "de"]
    default = "en"

    [install.admin]
    # this is a generic question - ask strings are automatically handled by YunoHost's core
    type = "user"

    [install.password]
    # this is a generic question - ask strings are automatically handled by YunoHost's core
    # Note that user-provided passwords questions are not automatically saved as setting
    help.en = "Sets the admin password."
    help.fr = "Définit le mot de passe Admin"
    help.de = "Setzt das Admin Passwort"
    type = "password"

[resources]
    # See the packaging documentation for the full set
    # of explanation regarding the behavior and properties for each of those

    [resources.sources]

    [resources.sources.main]
    # This will pre-fetch the asset which can then be deployed during the install/upgrade scripts with :
    #    ynh_setup_source --dest_dir="$install_dir"
    # You can also define other assets than "main" and add --source_id="foobar" in the previous command
    url = ""
    sha256 = ""

    # These infos are used by https://github.com/YunoHost/apps_tools/blob/main/autoupdate_app_sources/autoupdate_app_sources.py
    # to auto-update the previous asset urls and sha256sum + manifest version
    # assuming the upstream's code repo is on github and relies on tags or releases
    # See the 'sources' resource documentation for more details

    # autoupdate.strategy = "latest_github_tag"

    [resources.system_user]
    # This will provision/deprovision a unix system user

    [resources.install_dir]
    # This will create/remove the install dir as /var/www/$app
    # and store the corresponding setting $install_dir

    [resources.data_dir]
    # This will create/remove the data dir as /home/yunohost.app/$app
    # and store the corresponding setting $data_dir

    [resources.permissions]
    # This will configure SSOwat permission for $domain/$path/
    # The initial allowed group of user is configured via the init_main_permission question (public=visitors, private=all_users)
    main.url = "/"

    [resources.ports]
    # This will pick a random port for reverse-proxying and store it as the $port setting

